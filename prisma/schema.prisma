generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  name                 String?
  password             String
  createdIsusus        Isusu[]               @relation("CreatedIsusus")
  isusuMemberships     IsusuMembers[]
  receivedTransactions Transaction[]         @relation("ReceivedTransactions")
  sentTransactions     Transaction[]         @relation("SentTransactions")
  walletId             String?               @unique
  wallet               Wallet?               @relation("UserWallet", fields: [walletId], references: [id])
  timelines            TransactionTimeline[] @relation("UserTimelines")
  posts                Post[] // ✅ Added to fix the error
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0.00)
  createdAt DateTime @default(now())
  user      User?    @relation("UserWallet")
  isusu     Isusu?   @relation("IsusuWallet")
}

model Transaction {
  id          String   @id @default(uuid())
  amount      Float
  type        String
  status      String
  createdAt   DateTime @default(now())
  recipientId String?
  senderId    String
  reference   String   @unique
  description String?
  isIsusu     Boolean  @default(false)
  isusuId     String?

  recipient User?  @relation("ReceivedTransactions", fields: [recipientId], references: [id])
  sender    User   @relation("SentTransactions", fields: [senderId], references: [id])
  isusu     Isusu? @relation("IsusuTransactions", fields: [isusuId], references: [id])

  transactionTimeline TransactionTimeline[]
}

model TransactionTimeline {
  id              String  @id @default(uuid())
  transactionId   String
  userId          String
  isusuId         String?
  amount          Float
  transactionType String
  status          String
  description     String?

  transaction Transaction @relation(fields: [transactionId], references: [id])
  user        User        @relation("UserTimelines", fields: [userId], references: [id])
  isusu       Isusu?      @relation("IsusuTimelines", fields: [isusuId], references: [id])
}

model Isusu {
  id                 String                @id @default(uuid())
  isusuName          String
  frequency          String
  milestone          Float
  isusuClass         String
  createdAt          DateTime              @default(now())
  invite_code        String?               @unique @default(uuid())
  createdById        String
  isActive           Boolean               @default(false)
  createdBy          User                  @relation("CreatedIsusus", fields: [createdById], references: [id])
  members            IsusuMembers[]
  walletId           String?               @unique
  wallet             Wallet?               @relation("IsusuWallet", fields: [walletId], references: [id])
  transactions       Transaction[]         @relation("IsusuTransactions")
  timelines          TransactionTimeline[] @relation("IsusuTimelines")
  contributionAmount Float?
  startDate          DateTime?
  posts              Post[]
}

model IsusuMembers {
  id       String   @id @default(uuid())
  isusuId  String
  joinedAt DateTime @default(now())
  userId   String
  isusu    Isusu    @relation(fields: [isusuId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Post {
  id        String   @id @default(uuid())
  title     String? // ✅ Added title field
  content   String
  mediaUrl  String?
  isusuId   String
  userId    String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  isusu Isusu @relation(fields: [isusuId], references: [id])
}
