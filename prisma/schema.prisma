generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  name             String?
  password         String
  createdIsusus    Isusu[]        @relation("CreatedIsusus")
  isusuMemberships IsusuMembers[]
  wallet           Wallet?
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  balance   Float    @default(0.0)
  createdAt DateTime @default(now()) // âœ… Added createdAt

  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id           String   @id @default(uuid())
  senderId     String
  recipientId  String
  amount       Float
  type         String
  status       String
  sender       User     @relation(name: "SentTransactions", fields: [senderId], references: [id])
  recipient    User     @relation(name: "ReceivedTransactions", fields: [recipientId], references: [id])
  createdAt    DateTime @default(now())
  reference String  @unique
}



model Isusu {
  id          String         @id @default(uuid())
  isusuName   String
  frequency   String
  milestone   Float
  isusuClass  String
  createdAt   DateTime       @default(now())
  invite_code String         @unique @default(uuid())
  createdById String         // Now required
  createdBy   User           @relation("CreatedIsusus", fields: [createdById], references: [id])
  members     IsusuMembers[]
}

model IsusuMembers {
  id        String   @id @default(uuid())
  isusuId   String
  userId    String
  joinedAt  DateTime @default(now())
  isusu     Isusu    @relation(fields: [isusuId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
