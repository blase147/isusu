generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  name                 String?
  password             String
  createdIsusus        Isusu[]        @relation("CreatedIsusus")
  isusuMemberships     IsusuMembers[]
  receivedTransactions Transaction[]  @relation("ReceivedTransactions")
  sentTransactions     Transaction[]  @relation("SentTransactions")
  walletId             String?        @unique  // ✅ Keep walletId for direct access
  wallet               Wallet?        @relation("UserWallet", fields: [walletId], references: [id]) // ✅ Fields only here
  timelines            TransactionTimeline[]  @relation("UserTimelines")
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0.00)
  createdAt DateTime @default(now())
  user      User?    @relation("UserWallet")  // ✅ No fields/references here
  isusu     Isusu?   @relation("IsusuWallet") // ✅ No fields/references here
}

model Transaction {
  id          String   @id @default(uuid())
  amount      Float
  type        String   // e.g., TRANSFER, DEPOSIT, WITHDRAWAL
  status      String   // e.g., PENDING, SUCCESS, FAILED
  createdAt   DateTime @default(now())
  recipientId String?  // Nullable for group transactions
  senderId    String
  reference   String   @unique
  description String?  // Optional transaction description
  isIsusu     Boolean  @default(false)  // Flag for Isusu transactions
  isusuGroupId String? // Nullable if not an Isusu transaction

  recipient   User?    @relation("ReceivedTransactions", fields: [recipientId], references: [id])
  sender      User     @relation("SentTransactions", fields: [senderId], references: [id])
  isusuGroup  Isusu?   @relation("IsusuTransactions", fields: [isusuGroupId], references: [id]) // ✅ Fixed relation name

  transactionTimeline TransactionTimeline[]
}

model TransactionTimeline {
  id             String   @id @default(uuid())
  transactionId  String
  userId         String
  isusuGroupId   String?
  amount         Float
  transactionType String
  status        String
  description   String?

  transaction  Transaction @relation(fields: [transactionId], references: [id])
  user         User        @relation("UserTimelines", fields: [userId], references: [id])
  isusuGroup   Isusu?      @relation("IsusuTimelines", fields: [isusuGroupId], references: [id]) // ✅ Fixed relation name
}

model Isusu {
  id            String                 @id @default(uuid())
  isusuName     String
  frequency     String
  milestone     Float
  isusuClass    String
  createdAt     DateTime               @default(now())
  invite_code   String?                 @unique
  createdById   String
  isActive      Boolean                @default(false) // ✅ Track activation state
  createdBy     User                   @relation("CreatedIsusus", fields: [createdById], references: [id])
  members       IsusuMembers[]
  walletId      String?                 @unique
  wallet        Wallet?                 @relation("IsusuWallet", fields: [walletId], references: [id])
  transactions  Transaction[]           @relation("IsusuTransactions")
  timelines     TransactionTimeline[]   @relation("IsusuTimelines")
  contributionAmount Float?
}

model IsusuMembers {
  id       String   @id @default(uuid())
  isusuId  String
  joinedAt DateTime @default(now())
  userId   String
  isusu    Isusu    @relation(fields: [isusuId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}
